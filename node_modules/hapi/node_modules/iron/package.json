{
  "name": "iron",
  "description": "Encapsulated tokens (encrypted and mac'ed objects)",
  "version": "0.3.2",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/hueniverse/iron"
  },
  "main": "index",
  "keywords": [
    "authentication",
    "encryption",
    "data integrity"
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "hoek": "0.9.x",
    "boom": "0.4.x",
    "cryptiles": "0.2.x"
  },
  "devDependencies": {
    "lab": "0.x.x",
    "complexity-report": "0.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hueniverse/iron/raw/master/LICENSE"
    }
  ],
  "readme": "![iron](https://raw.github.com/hueniverse/iron/master/images/iron.png)\r\n\r\n<img align=\"right\" src=\"https://raw.github.com/hueniverse/iron/master/images/logo.png\" /> **iron** is a cryptographic\r\nutility for sealing a JSON object using symmetric key encryption with message integrity verification. Or in other words,\r\nit lets you encrypt an object, send it around (in cookies, authentication credentials, etc.), then receive it back and\r\ndecrypt it. The algorithm ensures that the message was not tempered with, and also provides a simple mechanism for\r\npassword rotation.\r\n\r\nCurrent version: **0.3**\r\n\r\n[![Build Status](https://secure.travis-ci.org/hueniverse/iron.png)](http://travis-ci.org/hueniverse/iron)\r\n\r\n\r\n# Table of Content\r\n\r\n- [**Introduction**](#introduction)\r\n<p></p>\r\n- [Usage](#usage)\r\n  - [Options](#options)\r\n<p></p>\r\n- [**Security Considerations**](#security-considerations)\r\n  - [Plaintext Storage of Credentials](#plaintext-storage-of-credentials)\r\n<p></p>\r\n- [**Frequently Asked Questions**](#frequently-asked-questions)\r\n<p></p>\r\n- [**Acknowledgements**](#acknowledgements)\r\n\r\n# Introduction\r\n\r\n**iron** provides methods for encrypting an object, generating a message authentication code (MAC), and serializing both\r\ninto a cookie / URI / HTTP header friendly format. Sealed objects are useful in cases where state has to reside on other\r\napplications not under your control, without exposing the details of this state to those application.\r\n\r\nFor example, sealed objects allow you to encrypt the permissions granted to the authenticated user, store those permissions\r\nusing a cookie, without worrying about someone modifying (or even knowing) what those permissions are. Any modification to\r\nthe encrypted data will invalidate its integrity.\r\n\r\nThe seal process follows these general steps:\r\n\r\n- generate encryption salt `saltE`\r\n- derive an encryption key `keyE` using `saltE` and a password\r\n- generate an integrity salt `saltI`\r\n- derive an integrity (HMAC) key `keyI` using `saltI`\r\n- generate a random [initialization vector](http://en.wikipedia.org/wiki/Initialization_vector) `iv`\r\n- encrypt the serialized object string using `keyE` and `iv`\r\n- mac the encrypted object along with `saltE` and `iv`\r\n- concatenate `saltE`, `saltI`, `iv`, and the encrypted object into a URI-friendly string\r\n\r\n\r\n# Usage\r\n\r\nTo seal an object:\r\n\r\n```javascript\r\nvar obj = {\r\n    a: 1,\r\n    b: 2,\r\n    c: [3, 4, 5],\r\n    d: {\r\n        e: 'f'\r\n    }\r\n};\r\n\r\nvar password = 'some_not_random_password';\r\n\r\nIron.seal(obj, password, Iron.defaults, function (err, sealed) {\r\n\r\n    console.log(sealed);\r\n});\r\n```\r\n\r\nThe result `sealed` object is a string which can be sent via cookies, URI query parameter, or an HTTP header attribute.\r\nTo unseal the string:\r\n\r\n```javascript\r\nIron.unseal(sealed, password, Iron.defaults, function (err, unsealed) {\r\n\r\n    // unsealed has the same content as obj\r\n});\r\n```\r\n\r\n### Options\r\n\r\n**iron** provides a few options for customizing the key deriviation algorithm used to generate encryption and integrity\r\nverification keys as well as the algorithms and salt sizes used. The _'seal()'_ and _'unseal()'_ methods take an options\r\nobject with the following **required** keys:\r\n\r\n- `encryption` - defines the options used by the encryption process.\r\n- `integrity` - defines the options used by the HMAC itegrity verification process.\r\n\r\nEach of these option objects includes the following **required** keys:\r\n\r\n- `saltBits` - the size of the salt (random buffer used to ensure that two identical objects will generate a different encrypted result.\r\n- `algorithm` - the algorithm used ('aes-256-cbc' for encryption and 'sha256' for integrity are the only two supported at this time).\r\n- `iterations` - the number of iterations used to derive a key from the password (set to '1' if not sure).\r\n\r\n**iron** includes a default options object which can be passed to the methods as shown above in the example. The default\r\nsettings are:\r\n\r\n```javascript\r\nvar options = {\r\n    encryption: {\r\n        saltBits: 256,\r\n        algorithm: 'aes-256-cbc',\r\n        iterations: 1\r\n    },\r\n    integrity: {\r\n        saltBits: 256,\r\n        algorithm: 'sha256',\r\n        iterations: 1\r\n    }\r\n};\r\n```\r\n\r\nAlternatively, a Buffer object of sufficient size (matching the algorithm key size requirement) can be passed as the\r\npassword, in which case, `saltBits` and `iterations` are ignored and the buffer is used as-is.\r\n\r\n\r\n# Security Considerations\r\n\r\nThe greatest sources of security risks are usually found not in **iron** but in the policies and procedures surrounding its use.\r\nImplementers are strongly encouraged to assess how this module addresses their security requirements. This section includes\r\nan incomplete list of security considerations that must be reviewed and understood before using **iron**.\r\n\r\n\r\n### Plaintext Storage of Credentials\r\n\r\nThe **iron** password is only used to derive keys and is never sent or shared. However, in order to generate (and regenerate) the\r\nkeys used to encrypt the object and compute the request MAC, the server must have access to the password in plaintext form. This\r\nis in contrast, for example, to modern operating systems, which store only a one-way hash of user credentials.\r\n\r\nIf an attacker were to gain access to the password - or worse, to the server's database of all such password - he or she would be able\r\nto encrypt and decrypt any sealed object. Accordingly, it is critical that servers protect these passwords from unauthorized\r\naccess.\r\n\r\n\r\n# Frequently Asked Questions\r\n\r\n### Where is the protocol specification?\r\n\r\nIf you are looking for some prose explaining how all this works, there isn't any. **iron** is being developed as an open source\r\nproject instead of a standard. In other words, the [code](/hueniverse/iron/tree/master/lib) is the specification. Not sure about\r\nsomething? Open an issue!\r\n\r\n\r\n### Is it done?\r\n\r\nNo but it's close. Until this module reaches version 1.0.0 it is considered experimental and is likely to change. This also\r\nmeans your feedback and contribution are very welcome. Feel free to open issues with questions and suggestions.\r\n\r\n\r\n### How come the defaults must be manually passed and not automatically applied?\r\n\r\nBecause you should know what you are doing and explicitly set it. The options matter a lot to the security properties of the\r\nimplementation. While reasonable defaults are provided, you still need to explicitly state you want to use them.\r\n\r\n\r\n# Acknowledgements\r\n\r\nSpecial thanks to Adam Barth for his infinite patiace, and always insightful feedback and advice.\r\n\r\nThe **iron** logo was based on origin artwork created by [Chris Carrasco](http://chriscarrasco.com).\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hueniverse/iron/issues"
  },
  "_id": "iron@0.3.2",
  "_from": "iron@0.3.x"
}
